CREATE TABLE IF NOT EXISTS "public"."game_configs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "initial_starting_point" integer DEFAULT 25000 NOT NULL,
    "settlement_score" integer DEFAULT 25000 NOT NULL,
    "position_points" smallint[4] DEFAULT '{0, 0, 0, 0}' NOT NULL
);

ALTER TABLE "public"."game_configs" OWNER TO "postgres";

ALTER TABLE "public"."game_configs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_configs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."game_configs"
    ADD CONSTRAINT "game_configs_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."game_configs"
    ADD CONSTRAINT "game_configs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

GRANT ALL ON TABLE "public"."game_configs" TO "anon";
GRANT ALL ON TABLE "public"."game_configs" TO "authenticated";
GRANT ALL ON TABLE "public"."game_configs" TO "service_role";

alter table "public"."game_configs" enable row level security;

create policy "user can view game_configs that themselves"
  on public.game_configs for select using (("auth"."uid"() = "user_id"));

create policy "user can update game_configs that themselves"
  on public.game_configs for update using (("auth"."uid"() = "user_id"));

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.users (id)
  values (new.id);

  -- ゲーム設定テーブルも一緒に生成
  insert into public.game_configs (user_id)
  values (new.id);
  
  return new;
end;$$;
