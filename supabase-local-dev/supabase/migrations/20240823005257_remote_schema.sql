
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."status" AS ENUM (
    'pending',
    'accepted',
    'rejected'
);

ALTER TYPE "public"."status" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."exists_friend_id"("target_id" "text") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
    RETURN EXISTS(SELECT * FROM public.users WHERE friend_id = target_id);
END
$$;

ALTER FUNCTION "public"."exists_friend_id"("target_id" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.users (id)
  values (new.id);
  return new;
end;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."avatars" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "url" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."avatars" OWNER TO "postgres";

COMMENT ON TABLE "public"."avatars" IS 'アバター画像取得用';

ALTER TABLE "public"."avatars" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."avatars_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."friends" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "friend_id" "uuid"
);

ALTER TABLE "public"."friends" OWNER TO "postgres";

ALTER TABLE "public"."friends" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."friends_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."group_round_results" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "group_session_result_id" bigint
);

ALTER TABLE "public"."group_round_results" OWNER TO "postgres";

ALTER TABLE "public"."group_round_results" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."group_round_results_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."group_session_results" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "group_id" bigint
);

ALTER TABLE "public"."group_session_results" OWNER TO "postgres";

ALTER TABLE "public"."group_session_results" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."group_session_results_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."groups" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    CONSTRAINT "groups_discription_check" CHECK (("length"("description") <= 300)),
    CONSTRAINT "groups_name_check" CHECK (("length"("name") <= 30))
);

ALTER TABLE "public"."groups" OWNER TO "postgres";

ALTER TABLE "public"."groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_friend_requests" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "target_user_id" "uuid",
    "status" "public"."status" DEFAULT 'pending'::"public"."status" NOT NULL
);

ALTER TABLE "public"."user_friend_requests" OWNER TO "postgres";

ALTER TABLE "public"."user_friend_requests" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_friend_requests_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_group_round_results" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "group_round_result_id" bigint,
    "score" integer NOT NULL,
    "rank" smallint NOT NULL,
    "total_points" integer NOT NULL
);

ALTER TABLE "public"."user_group_round_results" OWNER TO "postgres";

COMMENT ON COLUMN "public"."user_group_round_results"."score" IS '対局終了時の得点（ウマオカは入れない）';

COMMENT ON COLUMN "public"."user_group_round_results"."rank" IS '順位（1-4）';

COMMENT ON COLUMN "public"."user_group_round_results"."total_points" IS 'ウマオカ入れた総合得点（例：25, -10）';

ALTER TABLE "public"."user_group_round_results" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_group_round_results_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_joinned_groups" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "group_id" bigint
);

ALTER TABLE "public"."user_joinned_groups" OWNER TO "postgres";

ALTER TABLE "public"."user_joinned_groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_joinned_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "profile" "text" DEFAULT ''::"text" NOT NULL,
    "avatar_url" "text" DEFAULT ''::"text" NOT NULL,
    "email" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "friend_id" bigint NOT NULL,
    CONSTRAINT "users_name_check" CHECK (("length"("name") <= 30)),
    CONSTRAINT "users_profile_check" CHECK (("length"("profile") <= 300))
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE "public"."users" ALTER COLUMN "friend_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."users_friend_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."avatars"
    ADD CONSTRAINT "avatars_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."avatars"
    ADD CONSTRAINT "avatars_url_key" UNIQUE ("url");

ALTER TABLE ONLY "public"."friends"
    ADD CONSTRAINT "friends_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."group_round_results"
    ADD CONSTRAINT "group_round_results_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."group_session_results"
    ADD CONSTRAINT "group_session_results_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."groups"
    ADD CONSTRAINT "groups_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_friend_requests"
    ADD CONSTRAINT "user_friend_requests_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_group_round_results"
    ADD CONSTRAINT "user_group_round_results_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_joinned_groups"
    ADD CONSTRAINT "user_joinned_groups_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_friend_id_key" UNIQUE ("friend_id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."friends"
    ADD CONSTRAINT "friends_friend_id_fkey" FOREIGN KEY ("friend_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."friends"
    ADD CONSTRAINT "friends_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."group_round_results"
    ADD CONSTRAINT "group_round_results_group_session_result_id_fkey" FOREIGN KEY ("group_session_result_id") REFERENCES "public"."group_session_results"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."group_session_results"
    ADD CONSTRAINT "group_session_results_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."groups"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_friend_requests"
    ADD CONSTRAINT "user_friend_requests_target_user_id_fkey" FOREIGN KEY ("target_user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_friend_requests"
    ADD CONSTRAINT "user_friend_requests_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_group_round_results"
    ADD CONSTRAINT "user_group_round_results_group_round_result_id_fkey" FOREIGN KEY ("group_round_result_id") REFERENCES "public"."group_round_results"("id");

ALTER TABLE ONLY "public"."user_group_round_results"
    ADD CONSTRAINT "user_group_round_results_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_joinned_groups"
    ADD CONSTRAINT "user_joinned_groups_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."groups"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_joinned_groups"
    ADD CONSTRAINT "user_joinned_groups_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Allow select for all authenticated users." ON "public"."users" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));

CREATE POLICY "Allow update for users themselves." ON "public"."users" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."friends" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."group_round_results" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."group_session_results" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."groups" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_friend_requests" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_group_round_results" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_joinned_groups" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."avatars";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."friends";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."group_session_results";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."groups";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_friend_requests";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_joinned_groups";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."exists_friend_id"("target_id" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."exists_friend_id"("target_id" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."exists_friend_id"("target_id" "text") TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."avatars" TO "anon";
GRANT ALL ON TABLE "public"."avatars" TO "authenticated";
GRANT ALL ON TABLE "public"."avatars" TO "service_role";

GRANT ALL ON SEQUENCE "public"."avatars_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."avatars_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."avatars_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."friends" TO "anon";
GRANT ALL ON TABLE "public"."friends" TO "authenticated";
GRANT ALL ON TABLE "public"."friends" TO "service_role";

GRANT ALL ON SEQUENCE "public"."friends_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."friends_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."friends_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."group_round_results" TO "anon";
GRANT ALL ON TABLE "public"."group_round_results" TO "authenticated";
GRANT ALL ON TABLE "public"."group_round_results" TO "service_role";

GRANT ALL ON SEQUENCE "public"."group_round_results_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."group_round_results_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."group_round_results_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."group_session_results" TO "anon";
GRANT ALL ON TABLE "public"."group_session_results" TO "authenticated";
GRANT ALL ON TABLE "public"."group_session_results" TO "service_role";

GRANT ALL ON SEQUENCE "public"."group_session_results_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."group_session_results_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."group_session_results_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."groups" TO "anon";
GRANT ALL ON TABLE "public"."groups" TO "authenticated";
GRANT ALL ON TABLE "public"."groups" TO "service_role";

GRANT ALL ON SEQUENCE "public"."groups_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."groups_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."groups_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_friend_requests" TO "anon";
GRANT ALL ON TABLE "public"."user_friend_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."user_friend_requests" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_friend_requests_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_friend_requests_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_friend_requests_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_group_round_results" TO "anon";
GRANT ALL ON TABLE "public"."user_group_round_results" TO "authenticated";
GRANT ALL ON TABLE "public"."user_group_round_results" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_group_round_results_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_group_round_results_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_group_round_results_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_joinned_groups" TO "anon";
GRANT ALL ON TABLE "public"."user_joinned_groups" TO "authenticated";
GRANT ALL ON TABLE "public"."user_joinned_groups" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_joinned_groups_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_joinned_groups_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_joinned_groups_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON SEQUENCE "public"."users_friend_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_friend_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_friend_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
